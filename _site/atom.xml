<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>冉杰的博客</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2017-01-12T16:55:09+08:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name>ranjie</name>
   <email></email>
 </author>

 
 <entry>
   <title>github命令总结</title>
   <link href="http://localhost:4000/github/2017/01/12/github%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93.html"/>
   <updated>2017-01-12T00:00:00+08:00</updated>
   <id>http://localhost:4000/github/2017/01/12/github命令总结</id>
   <content type="html">&lt;p class=&quot;message&quot;&gt;
  算上实习工作已经4年了，中间也在各种平台上断断续续的写了一些博客，但都没有形成习惯。我大概分析了一下，我写的东西都不是给别人看的，只是单纯的为了记述当时的学习过程，叫做笔记更合适。我非常不屑于那些为了给别人看，事无巨细的长篇大论。如果你能完全读懂我写的内容，说明你很厉害，因为我只会记录那些我认为重要的东西。
&lt;/p&gt;

&lt;h2 id=&quot;gitgithub&quot;&gt;git和github&lt;/h2&gt;

&lt;p&gt;git是一个分布式的版本控制系统，用作Linux内核代码的管理。github可以托管各种git库，并提供一个web界面，github的独特卖点在于从另外一个项目进行分支的简易性。为一个项目贡献代码非常简单：首先点击项目站点的“fork”按钮，然后将代码检出并将修改加入到刚才分出的代码库中，最后通过内建的“pull request”机制向项目负责人申请代码合并。&lt;/p&gt;

&lt;p&gt;使用github可以有很多方式，在mac和windows上都有客户端，有兴趣可以自己了解。在此我只讲如何使用命令行操作，如果能熟练使用命令行，是非常炫酷的事。&lt;/p&gt;

&lt;h2 id=&quot;git&quot;&gt;配置git&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config —global user.name “xxx”
git config —global user.email “xxx”	
git config —list	查看配置列表
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;配置 sshkey ： 上传代码时使用这个 sshkey 来确认是否有上传权限&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;创建本地 ssh ： ssh-keygen -t rsa -C “Github 的注册邮箱”&lt;/li&gt;
  &lt;li&gt;在 Github 中添加这个 sshkey ： &lt;br /&gt;
      复制windows环境下&lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Documents and Settings\Administrator\\.ssh\id_rsa.pub&lt;/code&gt;，linux环境下&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/id_rsa.pub&lt;/code&gt;文件中的内容；&lt;br /&gt;
      登录 Github –&amp;gt; Account Setting  –&amp;gt; SSH-KEY –&amp;gt; Add SSH-KEY –&amp;gt; 粘贴id_rsa.pub中的内容；&lt;/li&gt;
  &lt;li&gt;验证： ssh -T git@github.com
      出现 Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access. 说明配置成功，可以连接上 Github&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;git-push&quot;&gt;去掉git push时输入账号密码&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;在~/目录下，touch创建文件.git-credentials，用vim编辑此文件：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;vim .git-credentials&lt;/code&gt;&lt;br /&gt;
输入内容：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;https://{username}:{password}@github.com&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;在终端下执行：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git config —global credential.helper store&lt;/code&gt;&lt;br /&gt;
可以看到~/.gitconfig文件，会多了一项：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;[credential]&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;helper=store&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这时候就不需要输入密码了&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;常用基本命令&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# git init 
本地初始化仓库，它会创建一个隐藏的文件夹.git  

# git clone 地址		
从网络上拷贝仓库到本地，这样直接clone别人的仓库，不能push自己的修改内容 

# git status	
查看当前仓库的状态。碰到问题不知道怎么办时，可通过它给出的提示解决问题 

# git diff	
查看当前状态和最新的commit之间不同的地方，如git diff readme.txt

# git add -A 	
在commit之前要先add，add后面也可以直接跟具体文件

# git commit -m &quot;提交信息&quot;	提交信息最好体现更改了什么

# git rm xxx      从本地仓库中删除指定文件
# git rm -r xxx   从本地仓库中删除指定文件夹

# git clean -xf	
删除当前目录下所有没有track过的文件。不管它是否是.gitignore文件里面指定的文件夹和文件

# git checkout 	如果只想把某个文件内容还原，后面跟文件名即可

# git log		查看当前版本及之前的commit记录

# git reset --hard 版本号		
回退到指定版本，该版本之后的修改都被删除。如果要回退到最新版本，执行git reflog

# git remote add origin 地址		
如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器

# git push -u origin master		
将本地仓库上传至github仓库并进行关联

# git pull		
在本地版本低于远程仓库版本时，获取远程仓库的commit
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-1&quot;&gt;如何创建自己的分支&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 分支的创建和合并
# git branch yourbranch 
# git checkout yourbranch    切换到yourbranch

# 查看当前分支的情况（会列出改仓库中所有的分支，当前的分支前有星号）  
# git branch  

# 开发yourbranch分支，然后开发之后与master分支合并

# git checkout master
# git merge yourbranch
# git branch -d yourbranch    合并完后删除本地分支
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-2&quot;&gt;如何将牛人的远程分支更新到自己的本地分支？&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 查看当前项目下远程
# git remote
# 增加新的分支链接，例如
git remote add niuren giturl
# 获取牛人的远程更新
git fetch niuren
# 将牛人的远程更新合并到本地分支
git merge niuren/master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-3&quot;&gt;团队合作开发&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;零、前期准备&lt;br /&gt;
首先把队友直接push的权限关掉，即设置成Read。这样可以防止队友误操作，未经审核就把代码push到团队项目上。&lt;br /&gt;
在项目的setting下，左侧options下面有Collaborators&amp;amp; teams&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;一、创建开发分支
master分支一般用来发布稳定版本，dev分支（开发分支）用来发布开发版本。&lt;br /&gt;
输入分支名称后，下面会跳出Create branch，点击即可创建。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;二、Fork项目到个人的仓库&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;三、Clone项目到本地
&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone 地址&lt;/code&gt;&lt;br /&gt;
此时使用&lt;code class=&quot;highlighter-rouge&quot;&gt;git branch&lt;/code&gt;命令查看本地分支，只能看到master分支&lt;br /&gt;
使用&lt;code class=&quot;highlighter-rouge&quot;&gt;git branch -a&lt;/code&gt;查看所有分支，就能看到远程分支&lt;br /&gt;
根据远程分支，我们可以创建一个新的本地分支dev，并把该项目的dev分支的内容放到本地dev分支。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout -b dev origin/dev&lt;/code&gt;&lt;br /&gt;
意思是，创建一个dev分支(-b)，并把远程dev分支(origin/dev)的内容放在该分支内。接着切换到该分支(checkout)&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout master&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;四、和团队项目保持同步&lt;br /&gt;
1、首先查看有没有设置upstream，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;git remote -v&lt;/code&gt;命令来查看&lt;br /&gt;
如果没有显示upstream，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;git remote add upstream 团队项目地址&lt;/code&gt;命令&lt;br /&gt;
接着再次使用&lt;code class=&quot;highlighter-rouge&quot;&gt;git remote -v&lt;/code&gt;，显示出了upstream，那么就设置好了&lt;br /&gt;
2、开始同步。首先执行&lt;code class=&quot;highlighter-rouge&quot;&gt;git fetch upstream&lt;/code&gt;获取团队项目最新版本&lt;br /&gt;
此时并没有把最新版本合并到你本地的分支上，因此还需要一步。&lt;br /&gt;
3、当前分支是dev分支，执行&lt;code class=&quot;highlighter-rouge&quot;&gt;git merge upstream/dev&lt;/code&gt;命令后，会将源分支（upstream/dev）合并到当前分支（dev）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;五、push修改到自己的项目上&lt;br /&gt;
push时可能会遇到merge冲突问题，可以手动解决也可借助于工具，在此不多说。&lt;br /&gt;
解决冲突后，就可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt;将本地的修改同步到自己的github仓库了。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;六、请求合并到团队项目上&lt;br /&gt;
首先到你的GitHub上，进入你Fork的仓库里。点击红框处的Pull request&lt;br /&gt;
选择要合并到哪个分支，点击Create pull request就可以发送合并请求了。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;七、团队项目负责人审核及同意合并请求&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;gitignore&quot;&gt;.gitignore文件&lt;/h2&gt;
&lt;p&gt;告诉git忽略哪些文件，一般我们写完代码后会执行编译、调试等操作，会产生很多中间文件和可执行文件，这些都不是代码文件，不需要git来管理。在该文件中可以直接写目录名，可以写带后缀的文件类型，如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bin
*.class
# 忽略所有以.a为后缀的文件
*.a
# 但是lib.a这个文件除外，依然会被提交
!lib.a
build/*.txt
git.c
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;如想把git.c文件也提交上去，可以这样强制添加文件：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git add -f git.c&lt;/code&gt;&lt;br /&gt;
然后重新提交一次：&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit —amend&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;标签&lt;/h2&gt;
&lt;p&gt;标签tag用来指向开发中一个关键时期，这样以后回顾起来比较方便。如给最近一次提交的记录打个标签：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git tag v1.0&lt;/code&gt; &lt;br /&gt;
查看所有已有标签:&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git tag&lt;/code&gt;&lt;br /&gt;
查看此标签的详细信息：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git show v1.0&lt;/code&gt; &lt;br /&gt;
还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git tag v1.2 -m “version 1.2 released” d316fb&lt;/code&gt;&lt;br /&gt;
删除标签&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git tag -d v1.0&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;历史记录&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt;&lt;br /&gt;
如果只想看最近几条记录，可以这样操作：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git log -2&lt;/code&gt;&lt;br /&gt;
我们也常用-p参数来展开显示每次提交的内容差异，例如仅查看最近一次的差异：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git log -p -l&lt;/code&gt;&lt;br /&gt;
还可以使用- -stat参数来简要显示数据增改行数，如：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git log —stat -2&lt;/code&gt;&lt;br /&gt;
还有一个超级常用的- -pretty参数，可以根据不同的格式为我们展示提交的历史信息，如每行显示一条提交记录&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git log —pretty=oneline&lt;/code&gt;&lt;br /&gt;
以更详细的模式输出提交的历史记录：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git log —pretty=fuller -2&lt;/code&gt;&lt;br /&gt;
还可以使用format参数来指定具体的输出格式，方便提取分析：&lt;br /&gt;
%s	提交说明&lt;br /&gt;
%cd	提交日期&lt;br /&gt;
%an	作者的名字&lt;br /&gt;
%cn	提交者的姓名&lt;br /&gt;
%ce	提交这的电子邮件&lt;br /&gt;
%ad	作者的修订时间&lt;/p&gt;

&lt;h2 id=&quot;pushgithubcommit&quot;&gt;将低版本push到github(删掉高版本commit)&lt;/h2&gt;
&lt;p&gt;有时候会因为各种原因，想要回退版本。解决方法就是：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 先用reset回到你想要的版本
# git reset --hard 版本号

# git push --force
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;当然，一般是推荐用&lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin HEAD --force&lt;/code&gt;的，能防止因为其他没配置好而产生错误。&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;我曾经遇到过的问题&lt;/h3&gt;
&lt;p&gt;在MAC上无法连上github，提示unknown host，我是这么解决的：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.mDNSResponder.plist
sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.mDNSResponder.plist
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;本文参考&lt;a href=&quot;http://www.cnblogs.com/schaepher/p/5561193.html&quot;&gt;网址&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;next-post&quot;&gt;下一篇我想总结一下VIM的使用&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>如何在github上创建博客</title>
   <link href="http://localhost:4000/github/2017/01/11/%E5%A6%82%E4%BD%95%E5%9C%A8github%E4%B8%8A%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2.html"/>
   <updated>2017-01-11T00:00:00+08:00</updated>
   <id>http://localhost:4000/github/2017/01/11/如何在github上创建博客</id>
   <content type="html">&lt;p class=&quot;message&quot;&gt;
  这是我的第一篇博客，想写的有很多。就从我如何搭建博客开始吧！我是使用Jekyll搭建的，Jekyll是一个简单的免费Blog生成工具，类似WordPress。但是他们又有很大的不同，原因是Jekyll知识一个生成静态网页的工具，不需要数据库支持。目前也有很多人使用Hexo搭建博客，感觉两种方式都很不错。
&lt;/p&gt;

&lt;p&gt;在github上搭建博客，首先要有自己的账号，不多说。&lt;/p&gt;

&lt;p&gt;1、首先创建页面仓库，这个仓库的名字需要和你的账号对应，如quranjie.github.io，输入基本信息然后点击创建仓库。
&lt;img class=&quot;center-img width-600&quot; src=&quot;/assets/create_blog_on_github_01.png&quot; alt=&quot;Create a new repository&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2、去&lt;a href=&quot;http://jekyllthemes.org&quot;&gt;Jekyll官网&lt;/a&gt;下载一个合适的主题，拷贝到项目根目录，提交到github上，在浏览器上输入https://quranjie.github.io就可以看到效果啦。&lt;/p&gt;

&lt;p&gt;3、如果想要在本地看效果和调试，就需要使用&lt;a href=&quot;https://github.com/bundler/bundler&quot;&gt;Bundler&lt;/a&gt;了，安装Bundler的步骤如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;先检查ruby的版本，要求ruby版本高于2.1.0。在控制台执行命令&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;ruby --version&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;安装Bundler&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;gem install bundler&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;然后进入项目根目录，需要有一个Gemfile的文件，没有则创建。里面的内容为：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  source ‘https://rubygems.org’  
  gem ‘github-pages’, group::jekyll_plugins
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;然后执行&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;现在就可以在本地运行jekyll站点了&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec Jekyll serve&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可以看到运行成功提示，服务器地址&lt;code class=&quot;highlighter-rouge&quot;&gt;http://127.0.0.1:4000/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;本文的&lt;a href=&quot;https://help.github.com/articles/using-jekyll-as-a-static-site-generator-with-github-pages/&quot;&gt;参考网址&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;next-post&quot;&gt;下一篇我将详细的讲讲github命令&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Introducing Hyde</title>
   <link href="http://localhost:4000/jekyll/2013/12/28/introducing-hyde.html"/>
   <updated>2013-12-28T00:00:00+08:00</updated>
   <id>http://localhost:4000/jekyll/2013/12/28/introducing-hyde</id>
   <content type="html">&lt;p&gt;Hyde is a brazen two-column &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; theme that pairs a prominent sidebar with uncomplicated content. It’s based on &lt;a href=&quot;http://getpoole.com&quot;&gt;Poole&lt;/a&gt;, the Jekyll butler.&lt;/p&gt;

&lt;h3 id=&quot;built-on-poole&quot;&gt;Built on Poole&lt;/h3&gt;

&lt;p&gt;Poole is the Jekyll Butler, serving as an upstanding and effective foundation for Jekyll themes by &lt;a href=&quot;https://twitter.com/mdo&quot;&gt;@mdo&lt;/a&gt;. Poole, and every theme built on it (like Hyde here) includes the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Complete Jekyll setup included (layouts, config, &lt;a href=&quot;/404&quot;&gt;404&lt;/a&gt;, &lt;a href=&quot;/atom.xml&quot;&gt;RSS feed&lt;/a&gt;, posts, and &lt;a href=&quot;/about&quot;&gt;example page&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Mobile friendly design and development&lt;/li&gt;
  &lt;li&gt;Easily scalable text and component sizing with &lt;code class=&quot;highlighter-rouge&quot;&gt;rem&lt;/code&gt; units in the CSS&lt;/li&gt;
  &lt;li&gt;Support for a wide gamut of HTML elements&lt;/li&gt;
  &lt;li&gt;Related posts (time-based, because Jekyll) below each post&lt;/li&gt;
  &lt;li&gt;Syntax highlighting, courtesy Pygments (the Python-based code snippet highlighter)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;hyde-features&quot;&gt;Hyde features&lt;/h3&gt;

&lt;p&gt;In addition to the features of Poole, Hyde adds the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sidebar includes support for textual modules and a dynamically generated navigation with active link support&lt;/li&gt;
  &lt;li&gt;Two orientations for content and sidebar, default (left sidebar) and &lt;a href=&quot;https://github.com/poole/lanyon#reverse-layout&quot;&gt;reverse&lt;/a&gt; (right sidebar), available via &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; classes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/poole/hyde#themes&quot;&gt;Eight optional color schemes&lt;/a&gt;, available via &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; classes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/poole/hyde#readme&quot;&gt;Head to the readme&lt;/a&gt; to learn more.&lt;/p&gt;

&lt;h3 id=&quot;browser-support&quot;&gt;Browser support&lt;/h3&gt;

&lt;p&gt;Hyde is by preference a forward-thinking project. In addition to the latest versions of Chrome, Safari (mobile and desktop), and Firefox, it is only compatible with Internet Explorer 9 and above.&lt;/p&gt;

&lt;h3 id=&quot;download&quot;&gt;Download&lt;/h3&gt;

&lt;p&gt;Hyde is developed on and hosted with GitHub. Head to the &lt;a href=&quot;https://github.com/poole/hyde&quot;&gt;GitHub repository&lt;/a&gt; for downloads, bug reports, and features requests.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Example content</title>
   <link href="http://localhost:4000/jekyll/2012/02/07/example-content.html"/>
   <updated>2012-02-07T00:00:00+08:00</updated>
   <id>http://localhost:4000/jekyll/2012/02/07/example-content</id>
   <content type="html">&lt;div class=&quot;message&quot;&gt;
  Howdy! This is an example blog post that shows several types of HTML content supported in this theme.
&lt;/div&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis &lt;a href=&quot;#&quot;&gt;dis parturient montes&lt;/a&gt;, nascetur ridiculus mus. &lt;em&gt;Aenean eu leo quam.&lt;/em&gt; Pellentesque ornare sem lacinia quam venenatis vestibulum. Sed posuere consectetur est at lobortis. Cras mattis consectetur purus sit amet fermentum.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Curabitur blandit tempus porttitor. Nullam quis risus eget urna mollis ornare vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id elit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Etiam porta &lt;strong&gt;sem malesuada magna&lt;/strong&gt; mollis euismod. Cras mattis consectetur purus sit amet fermentum. Aenean lacinia bibendum nulla sed consectetur.&lt;/p&gt;

&lt;h2 id=&quot;inline-html-elements&quot;&gt;Inline HTML elements&lt;/h2&gt;

&lt;p&gt;HTML defines a long list of available inline tags, a complete list of which can be found on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element&quot;&gt;Mozilla Developer Network&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;To bold text&lt;/strong&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;To italicize text&lt;/em&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;em&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Abbreviations, like &lt;abbr title=&quot;HyperText Markup Langage&quot;&gt;HTML&lt;/abbr&gt; should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt;, with an optional &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt; attribute for the full phrase.&lt;/li&gt;
  &lt;li&gt;Citations, like &lt;cite&gt;— Mark otto&lt;/cite&gt;, should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;cite&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Deleted&lt;/del&gt; text should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;del&amp;gt;&lt;/code&gt; and &lt;ins&gt;inserted&lt;/ins&gt; text should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ins&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Superscript &lt;sup&gt;text&lt;/sup&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sup&amp;gt;&lt;/code&gt; and subscript &lt;sub&gt;text&lt;/sub&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sub&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of these elements are styled by browsers with few modifications on our part.&lt;/p&gt;

&lt;h2 id=&quot;heading&quot;&gt;Heading&lt;/h2&gt;

&lt;p&gt;Vivamus sagittis lacus vel augue rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.&lt;/p&gt;

&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis &lt;code class=&quot;highlighter-rouge&quot;&gt;code element&lt;/code&gt; montes, nascetur ridiculus mus.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Example can be run directly in your JavaScript console
&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Create a function that takes two arguments and returns the sum of those arguments
&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;return a + b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Call the function
&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &amp;gt; 8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa.&lt;/p&gt;

&lt;h3 id=&quot;gists-via-github-pages&quot;&gt;Gists via GitHub Pages&lt;/h3&gt;

&lt;p&gt;Vestibulum id ligula porta felis euismod semper. Nullam quis risus eget urna mollis ornare vel eu leo. Donec sed odio dui.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/5555251.js?file=gist.md&quot;&gt; &lt;/script&gt;

&lt;p&gt;Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Nullam quis risus eget urna mollis ornare vel eu leo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec sed odio dui. Vestibulum id ligula porta felis euismod semper.&lt;/p&gt;

&lt;h3 id=&quot;lists&quot;&gt;Lists&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Praesent commodo cursus magna, vel scelerisque nisl consectetur et.&lt;/li&gt;
  &lt;li&gt;Donec id elit non mi porta gravida at eget metus.&lt;/li&gt;
  &lt;li&gt;Nulla vitae elit libero, a pharetra augue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Donec ullamcorper nulla non metus auctor fringilla. Nulla vitae elit libero, a pharetra augue.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Vestibulum id ligula porta felis euismod semper.&lt;/li&gt;
  &lt;li&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.&lt;/li&gt;
  &lt;li&gt;Maecenas sed diam eget risus varius blandit sit amet non magna.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cras mattis consectetur purus sit amet fermentum. Sed posuere consectetur est at lobortis.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;HyperText Markup Language (HTML)&lt;/dt&gt;
  &lt;dd&gt;The language used to describe and define the content of a Web page&lt;/dd&gt;

  &lt;dt&gt;Cascading Style Sheets (CSS)&lt;/dt&gt;
  &lt;dd&gt;Used to describe the appearance of Web content&lt;/dd&gt;

  &lt;dt&gt;JavaScript (JS)&lt;/dt&gt;
  &lt;dd&gt;The programming language used to build advanced Web sites and applications&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;h3 id=&quot;images&quot;&gt;Images&lt;/h3&gt;

&lt;p&gt;Quisque consequat sapien eget quam rhoncus, sit amet laoreet diam tempus. Aliquam aliquam metus erat, a pulvinar turpis suscipit at.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://placehold.it/800x400&quot; alt=&quot;placeholder&quot; title=&quot;Large example image&quot; /&gt;
&lt;img src=&quot;http://placehold.it/400x200&quot; alt=&quot;placeholder&quot; title=&quot;Medium example image&quot; /&gt;
&lt;img src=&quot;http://placehold.it/200x200&quot; alt=&quot;placeholder&quot; title=&quot;Small example image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;tables&quot;&gt;Tables&lt;/h3&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Upvotes&lt;/th&gt;
      &lt;th&gt;Downvotes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;Totals&lt;/td&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Alice&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bob&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Charlie&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Nullam id dolor id nibh ultricies vehicula ut id elit. Sed posuere consectetur est at lobortis. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Want to see something else added? &lt;a href=&quot;https://github.com/poole/poole/issues/new&quot;&gt;Open an issue.&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>What's Jekyll?</title>
   <link href="http://localhost:4000/jekyll/2012/02/06/whats-jekyll.html"/>
   <updated>2012-02-06T00:00:00+08:00</updated>
   <id>http://localhost:4000/jekyll/2012/02/06/whats-jekyll</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; is a static site generator, an open-source tool for creating simple yet powerful websites of all shapes and sizes. From &lt;a href=&quot;https://github.com/mojombo/jekyll/blob/master/README.markdown&quot;&gt;the project’s readme&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Jekyll is a simple, blog aware, static site generator. It takes a template directory […] and spits out a complete, static website suitable for serving with Apache or your favorite web server. This is also the engine behind GitHub Pages, which you can use to host your project’s page or blog right here from GitHub.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s an immensely useful tool and one we encourage you to use here with Hyde.&lt;/p&gt;

&lt;p&gt;Find out more by &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;visiting the project on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 

</feed>
